#!/usr/bin/env ruby

$:.unshift(File.join(File.dirname(__FILE__), 'lib'))
require 'deployment'

# args
# 1 - checksum of the artifact to distribute

def read_gear_registry
  gears = []
if File.exists?(File.join(ENV['OPENSHIFT_HOMEDIR'], 'haproxy-1.4', 'conf', 'gear-registry.db'))
  File.open(File.join(ENV['OPENSHIFT_HOMEDIR'], 'haproxy-1.4', 'conf', 'gear-registry.db')).each do |line|
    # eade013180c842af98947e5728e88c1e@10.7.14.215:ruby-1.9;eade013180-andy.ose.rhc.redhat.com
    if line =~ /([^@]+)@([^:]+):/
      uuid, host = $~[1..2]
      gears << [uuid, host]
    end
  end
end
  gears
end

checksum=ARGV.shift

sync_base_dir = OpenShift::Deployment::ARTIFACTS_DIR

raise "Release #{checksum} has not been prepared yet" unless File.exist?(File.join(sync_base_dir, checksum))


puts "Validating artifact checksum on head gear"
`#{OpenShift::Deployment::SCRIPTS_DIR}/validate #{checksum}`
raise "Checksum validation failed on head gear" unless $?.success?

successes = []
failures = []

gears = read_gear_registry
puts "# of child gears = #{gears.count}"

output = Parallel.map(gears, :in_threads => 5) do |uuid, host|
  result = []
  result << "Distributing to #{uuid}@#{host}"

  # this should exist already when the user dir is synced on scale-up
  #result << "Creating artifact directory for #{checksum}"
  #`ssh #{uuid}@#{host} mkdir -p app-root/runtime/artifacts/#{checksum}`

  result << "Syncing artifact #{checksum}"
  result << `rsync -v --delete-after -az --rsh=ssh "#{sync_base_dir}/#{checksum}/" "#{uuid}@#{host}:#{OpenShift::Deployment::ARTIFACTS_DIR_NAME}/#{checksum}/"`

  result << "Validating checksum"
  `ssh #{uuid}@#{host} #{OpenShift::Deployment::SCRIPTS_DIR_NAME}/validate #{checksum}`

  if $?.success?
    result << "Checksum validated"
    successes << uuid
  else
    result << "Checksum validation failed"
    failures << uuid
  end

  result
end

output.each_with_index do |out, index|
  uuid = gears[index][0]
  puts "Result from gear #{uuid}"
  out.each { |o| puts "  #{o}" }
  puts ""
end

puts "\nSuccessful distributions: #{successes.count}"
successes.each { |uuid| puts uuid }

puts ""

puts "Failed distributions: #{failures.count}"
failures.each { |uuid| puts uuid }
